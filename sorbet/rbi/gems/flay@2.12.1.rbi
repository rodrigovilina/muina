# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `flay` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

class Array
  include ::Enumerable
  include ::JSON::Ext::Generator::GeneratorMethods::Array

  def delete_eql(other); end
end

File::RUBY19 = T.let(T.unsafe(nil), TrueClass)

class Flay
  def initialize(option = T.unsafe(nil)); end

  def analyze(filter = T.unsafe(nil)); end
  def collapse_and_label(ary); end
  def filter_sexp(exp); end
  def hashes; end
  def identical; end
  def identical=(_arg0); end
  def mass_threshold; end
  def mass_threshold=(_arg0); end
  def masses; end
  def masses=(_arg0); end
  def n_way_diff(*data); end
  def option; end
  def pad_with_empty_strings(ary); end
  def process(*files); end
  def process_fuzzy(node, difference); end
  def process_rb(file); end
  def process_sexp(pt); end
  def prune; end
  def prune_conservatively; end
  def prune_liberally; end
  def report(io = T.unsafe(nil)); end
  def sexp_to_rb(sexp); end
  def split_and_group(ary); end
  def summary; end
  def total; end
  def total=(_arg0); end
  def update_masses; end

  class << self
    def default_options; end
    def load_plugins; end
    def parse_options(args = T.unsafe(nil)); end
    def run(args = T.unsafe(nil)); end
  end
end

Flay::DEFAULT_IGNORE = T.let(T.unsafe(nil), String)

class Flay::Item < ::Struct
  def identical?; end
end

class Flay::Location < ::Struct
  def fuzzy?; end
end

Flay::MAX_AVG_MASS = T.let(T.unsafe(nil), Integer)
Flay::MAX_NODE_SIZE = T.let(T.unsafe(nil), Integer)
Flay::VERSION = T.let(T.unsafe(nil), String)

class Sexp < ::Array
  def initialize(*args); end

  def +(o); end
  def /(pattern); end
  def ==(obj); end
  def =~(pattern); end
  def [](a); end
  def add(_arg0); end
  def add_all(x); end
  def all_structural_subhashes; end
  def array_type?; end
  def block_pass?; end
  def check_line_numbers; end
  def code_index; end
  def comments; end
  def comments=(_arg0); end
  def compact; end
  def deep_each(&block); end
  def depth; end
  def each_of_type(t, &b); end
  def each_sexp; end
  def eql?(o); end
  def file; end
  def file=(_arg0); end
  def find_and_replace_all(from, to); end
  def find_node(name, delete = T.unsafe(nil)); end
  def find_nodes(name); end
  def gsub(pattern, repl); end
  def has_code?; end
  def hash; end
  def head; end
  def inspect; end
  def line(n = T.unsafe(nil)); end
  def line=(_arg0); end
  def line_max; end
  def line_min; end
  def map(&blk); end
  def mass; end
  def method_missing(meth, delete = T.unsafe(nil)); end
  def modified; end
  def modified=(_arg0); end
  def modified?; end
  def new(*body); end
  def nil_line?; end
  def node_type; end
  def paren; end
  def paren=(_arg0); end
  def pretty_print(q); end
  def pure_ruby_hash; end
  def replace_sexp(pattern, &block); end
  def respond_to?(msg, private = T.unsafe(nil)); end
  def rest(from = T.unsafe(nil)); end
  def satisfy?(pattern); end
  def search_each(pattern, &block); end
  def sexp_body(from = T.unsafe(nil)); end
  def sexp_body=(v); end
  def sexp_type; end
  def sexp_type=(v); end
  def split_at(n); end
  def split_code; end
  def structural_hash; end
  def structure; end
  def sub(pattern, repl); end
  def to_a; end
  def to_s; end
  def to_sym; end
  def value; end
  def values(from = T.unsafe(nil)); end

  private

  def initialize_copy(o); end

  class << self
    def -(arg); end
    def _; end
    def ___; end
    def all(*args); end
    def any(*args); end
    def atom; end
    def child(child); end
    def from_array(a); end
    def include(child); end
    def k(klass); end
    def m(*values); end
    def not?(arg); end
    def q(*args); end
    def s(*args); end
    def t(name); end
  end
end

Sexp::MAX_INT32 = T.let(T.unsafe(nil), Integer)
Sexp::NODE_NAMES = T.let(T.unsafe(nil), Hash)
Sexp::UNASSIGNED = T.let(T.unsafe(nil), Object)

class String
  include ::Comparable
  include ::JSON::Ext::Generator::GeneratorMethods::String
  include ::Colorize::InstanceMethods
  extend ::JSON::Ext::Generator::GeneratorMethods::String::Extend
  extend ::Colorize::ClassMethods

  def group; end
  def group=(_arg0); end
end

String::BLANK_RE = T.let(T.unsafe(nil), Regexp)
String::ENCODED_BLANKS = T.let(T.unsafe(nil), Concurrent::Map)
